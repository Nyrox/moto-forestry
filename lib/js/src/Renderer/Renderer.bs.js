// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Vdom = require("bucklescript-tea/lib/js/src-ocaml/vdom.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./Utils.bs.js");
var Global = require("./Global.bs.js");
var Tea_app = require("bucklescript-tea/lib/js/src-ocaml/tea_app.js");
var Tea_cmd = require("bucklescript-tea/lib/js/src-ocaml/tea_cmd.js");
var Tea_sub = require("bucklescript-tea/lib/js/src-ocaml/tea_sub.js");
var FileTree = require("./FileTree.bs.js");
var PassList = require("./PassList.bs.js");
var Tea_html = require("bucklescript-tea/lib/js/src-ocaml/tea_html.js");
var AppDomain = require("./AppDomain/AppDomain.bs.js");
var MonacoEditor = require("./MonacoEditor.bs.js");
var Web_document = require("bucklescript-tea/lib/js/src-ocaml/web_document.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function $great$great(f, g, a) {
  return Curry._1(g, Curry._1(f, a));
}

function $less$less(f, g, a) {
  return Curry._1(f, Curry._1(g, a));
}

AppDomain.createProject(undefined);

Fs.writeFileSync("rad.json", Json.stringify(AppDomain.Encode.project({
              passes: /* :: */[
                {
                  name: "TestPass",
                  vertexInput: AppDomain.mesh(Utils.Path.resolve("./teapot.obj"))
                },
                /* [] */0
              ]
            })), "utf8");

function tab(param_0) {
  return /* Tab */Block.__(0, [param_0]);
}

function setVertexInputData(param_0) {
  return /* SetVertexInputData */Block.__(1, [param_0]);
}

function editorMsg(param_0) {
  return /* EditorMsg */Block.__(2, [param_0]);
}

function init(param) {
  return {
          tab: /* Input */0,
          editor: MonacoEditor.init("<loading...>")
        };
}

function update(model, msg) {
  switch (msg.tag | 0) {
    case /* Tab */0 :
        return /* tuple */[
                {
                  tab: msg[0],
                  editor: model.editor
                },
                /* DoNothing */0
              ];
    case /* SetVertexInputData */1 :
        throw [
              Caml_builtin_exceptions.match_failure,
              /* tuple */[
                "Renderer.ml",
                41,
                8
              ]
            ];
    case /* EditorMsg */2 :
        return /* tuple */[
                {
                  tab: model.tab,
                  editor: MonacoEditor.update(model.editor, msg[0])
                },
                /* DoNothing */0
              ];
    
  }
}

function viewVertexDataBlock(model, pass) {
  return Tea_html.div(undefined, undefined, /* :: */[
              Tea_html.class$prime("block"),
              /* [] */0
            ], /* :: */[
              Tea_html.h2(undefined, undefined, /* [] */0, /* :: */[
                    Tea_html.text("Vertex Data"),
                    /* [] */0
                  ]),
              /* :: */[
                Tea_html.fieldset(undefined, undefined, /* [] */0, /* :: */[
                      Tea_html.select(undefined, undefined, /* [] */0, /* :: */[
                            Tea_html.option$prime(undefined, undefined, /* [] */0, /* :: */[
                                  Tea_html.text("your mom"),
                                  /* [] */0
                                ]),
                            /* [] */0
                          ]),
                      /* [] */0
                    ]),
                /* :: */[
                  Tea_html.div(undefined, undefined, /* :: */[
                        Tea_html.styles(/* :: */[
                              /* tuple */[
                                "width",
                                "200px"
                              ],
                              /* :: */[
                                /* tuple */[
                                  "height",
                                  "50px"
                                ],
                                /* [] */0
                              ]
                            ]),
                        /* :: */[
                          Tea_html.onCB("dragover", "", (function (e) {
                                  ((e.preventDefault()));
                                  ((e.dataTransfer.dropEffect = "link"));
                                  
                                })),
                          /* :: */[
                            Tea_html.onCB("drop", "", (function (e) {
                                    ((e.preventDefault()));
                                    var elemType = (e.dataTransfer.getData("application/elem-type"));
                                    if (elemType === "file") {
                                      return /* SetVertexInputData */Block.__(1, [AppDomain.mesh(Utils.Path.absolute("your mom"))]);
                                    }
                                    
                                  })),
                            /* [] */0
                          ]
                        ]
                      ], /* [] */0),
                  /* [] */0
                ]
              ]
            ]);
}

function viewUniformDataBlock(model, pass) {
  return Tea_html.div(undefined, undefined, /* :: */[
              Tea_html.class$prime("block"),
              /* [] */0
            ], /* :: */[
              Tea_html.h2(undefined, undefined, /* [] */0, /* :: */[
                    Tea_html.text("Uniform Data"),
                    /* [] */0
                  ]),
              /* [] */0
            ]);
}

function viewSamplerDataBlock(model, pass) {
  return Tea_html.div(undefined, undefined, /* :: */[
              Tea_html.class$prime("block"),
              /* [] */0
            ], /* :: */[
              Tea_html.h2(undefined, undefined, /* [] */0, /* :: */[
                    Tea_html.text("Samplers"),
                    /* [] */0
                  ]),
              /* [] */0
            ]);
}

function view(model, pass) {
  var panelTabButton = function (tab) {
    var isActive = tab === model.tab;
    var label = tab ? "Fragment Shader" : "Input";
    return Tea_html.button(undefined, undefined, /* :: */[
                Tea_html.onClick(/* Tab */Block.__(0, [tab])),
                /* :: */[
                  Tea_html.classList(/* :: */[
                        /* tuple */[
                          "active",
                          isActive
                        ],
                        /* [] */0
                      ]),
                  /* [] */0
                ]
              ], /* :: */[
                Tea_html.text(label),
                /* [] */0
              ]);
  };
  var panelNavigation = Tea_html.nav(undefined, undefined, /* :: */[
        Tea_html.class$prime("panel-navigation"),
        /* [] */0
      ], /* :: */[
        panelTabButton(/* Input */0),
        /* :: */[
          panelTabButton(/* FragmentShader */1),
          /* [] */0
        ]
      ]);
  var match = model.tab;
  var panelContent = Tea_html.div(undefined, undefined, /* :: */[
        Tea_html.class$prime("panel"),
        /* [] */0
      ], match ? /* :: */[
          Vdom.map((function (v) {
                  return /* EditorMsg */Block.__(2, [v]);
                }), MonacoEditor.view(model.editor)),
          /* [] */0
        ] : /* :: */[
          viewVertexDataBlock(model, pass),
          /* :: */[
            viewUniformDataBlock(model, pass),
            /* :: */[
              viewSamplerDataBlock(model, pass),
              /* [] */0
            ]
          ]
        ]);
  return /* :: */[
          panelNavigation,
          /* :: */[
            panelContent,
            /* [] */0
          ]
        ];
}

var PassView = {
  tab: tab,
  setVertexInputData: setVertexInputData,
  editorMsg: editorMsg,
  init: init,
  update: update,
  viewVertexDataBlock: viewVertexDataBlock,
  viewUniformDataBlock: viewUniformDataBlock,
  viewSamplerDataBlock: viewSamplerDataBlock,
  view: view
};

function passWindow(param_0, param_1) {
  return /* PassWindow */[
          param_0,
          param_1
        ];
}

function fileTreeMsg(param_0) {
  return /* FileTreeMsg */Block.__(0, [param_0]);
}

function passListMsg(param_0) {
  return /* PassListMsg */Block.__(1, [param_0]);
}

function globalMsg(param_0) {
  return /* GlobalMsg */Block.__(2, [param_0]);
}

function passViewMsg(param_0) {
  return /* PassViewMsg */Block.__(3, [param_0]);
}

var projectPath = "./TestProject/";

function loadProject(param) {
  var manifestPath = Path.resolve(projectPath, "project-manifest.json");
  if (Fs.existsSync(manifestPath)) {
    return AppDomain.Decode.project(Json.parseOrRaise(Fs.readFileSync(manifestPath, "utf8")));
  } else {
    return AppDomain.createProject(undefined);
  }
}

function init$1(param) {
  var match = FileTree.init(Utils.Path.resolve(projectPath));
  return /* tuple */[
          {
            fileTree: match[0],
            global: Global.init(undefined),
            project: loadProject(undefined),
            passList: PassList.init(undefined),
            mainWindow: /* Empty */0
          },
          Tea_cmd.map((function (v) {
                  return /* FileTreeMsg */Block.__(0, [v]);
                }), match[1])
        ];
}

var loadFile = (function (path) {
    return require("fs").readFileSync(path, "utf-8")
});

function update$1(model, msg) {
  if (typeof msg === "number") {
    return model;
  }
  switch (msg.tag | 0) {
    case /* FileTreeMsg */0 :
        var fileTree = FileTree.update(model.fileTree, msg[0]);
        return {
                fileTree: fileTree,
                global: model.global,
                project: model.project,
                passList: model.passList,
                mainWindow: model.mainWindow
              };
    case /* PassListMsg */1 :
        var match = PassList.update(model.passList, msg[0]);
        var intent = match[1];
        var passList = match[0];
        if (typeof intent === "number") {
          return {
                  fileTree: model.fileTree,
                  global: model.global,
                  project: model.project,
                  passList: passList,
                  mainWindow: model.mainWindow
                };
        }
        if (!intent.tag) {
          return {
                  fileTree: model.fileTree,
                  global: model.global,
                  project: model.project,
                  passList: passList,
                  mainWindow: /* PassWindow */[
                    intent[0],
                    {
                      tab: /* Input */0,
                      editor: MonacoEditor.init("<loading...>")
                    }
                  ]
                };
        }
        var p = intent[0];
        return {
                fileTree: model.fileTree,
                global: model.global,
                project: AppDomain.Project.createPass(model.project, p),
                passList: passList,
                mainWindow: /* PassWindow */[
                  p,
                  {
                    tab: /* Input */0,
                    editor: MonacoEditor.init("<loading...>")
                  }
                ]
              };
    case /* GlobalMsg */2 :
        var globalState = Global.update(model.global, msg[0]);
        return {
                fileTree: model.fileTree,
                global: globalState,
                project: model.project,
                passList: model.passList,
                mainWindow: model.mainWindow
              };
    case /* PassViewMsg */3 :
        throw [
              Caml_builtin_exceptions.match_failure,
              /* tuple */[
                "Renderer.ml",
                159,
                4
              ]
            ];
    
  }
}

function sidebar(fileTree, passList) {
  return Tea_html.div(undefined, undefined, /* :: */[
              Tea_html.class$prime("sidebar"),
              /* [] */0
            ], /* :: */[
              Vdom.map((function (v) {
                      return /* PassListMsg */Block.__(1, [v]);
                    }), passList),
              /* :: */[
                Vdom.map((function (v) {
                        return /* FileTreeMsg */Block.__(0, [v]);
                      }), fileTree),
                /* [] */0
              ]
            ]);
}

function getSelectedPass(model) {
  var match = model.mainWindow;
  if (match) {
    return match[0];
  }
  
}

function view$1(model) {
  var match = FileTree.view(model.fileTree);
  var param = PassList.view(model.passList, model.project.passes, getSelectedPass(model));
  var globalItems = List.concat(/* :: */[
        List.map((function (param) {
                return Vdom.map((function (v) {
                              return /* PassListMsg */Block.__(1, [v]);
                            }), param);
              }), param[1]),
        /* :: */[
          List.map((function (param) {
                  return Vdom.map((function (v) {
                                return /* FileTreeMsg */Block.__(0, [v]);
                              }), param);
                }), match[1]),
          /* [] */0
        ]
      ]);
  var match$1 = model.mainWindow;
  return Vdom.node(undefined, "transparent", undefined, undefined, /* :: */[
              Vdom.style("display", "contents"),
              /* [] */0
            ], List.concat(/* :: */[
                  /* :: */[
                    sidebar(match[0], param[0]),
                    /* [] */0
                  ],
                  /* :: */[
                    /* :: */[
                      Tea_html.div(undefined, undefined, /* :: */[
                            Tea_html.class$prime("main-view"),
                            /* [] */0
                          ], match$1 ? List.map((function (param) {
                                    return Vdom.map(passViewMsg, param);
                                  }), view(match$1[1], getSelectedPass(model))) : /* [] */0),
                      /* [] */0
                    ],
                    /* :: */[
                      List.map((function (param) {
                              return Vdom.map((function (v) {
                                            return /* GlobalMsg */Block.__(2, [v]);
                                          }), param);
                            }), Global.view(model.global)),
                      /* :: */[
                        globalItems,
                        /* [] */0
                      ]
                    ]
                  ]
                ]));
}

function subscriptions(model) {
  return Tea_sub.batch(/* :: */[
              Tea_sub.map((function (m) {
                      return /* FileTreeMsg */Block.__(0, [m]);
                    }), FileTree.subscriptions(model.fileTree)),
              /* [] */0
            ]);
}

function rendererEntry(param) {
  return Tea_app.standardProgram({
              init: init$1,
              update: (function (model, msg) {
                  ((window.__elmModel = model));
                  return /* tuple */[
                          update$1(model, msg),
                          Tea_cmd.none
                        ];
                }),
              view: view$1,
              subscriptions: subscriptions
            }, Web_document.getElementById("app"), undefined);
}

var jsonTest;

var empty = /* Empty */0;

var noOp = /* NoOp */0;

exports.$great$great = $great$great;
exports.$less$less = $less$less;
exports.jsonTest = jsonTest;
exports.PassView = PassView;
exports.empty = empty;
exports.passWindow = passWindow;
exports.fileTreeMsg = fileTreeMsg;
exports.passListMsg = passListMsg;
exports.globalMsg = globalMsg;
exports.passViewMsg = passViewMsg;
exports.noOp = noOp;
exports.projectPath = projectPath;
exports.loadProject = loadProject;
exports.init = init$1;
exports.loadFile = loadFile;
exports.update = update$1;
exports.sidebar = sidebar;
exports.getSelectedPass = getSelectedPass;
exports.view = view$1;
exports.subscriptions = subscriptions;
exports.rendererEntry = rendererEntry;
/*  Not a pure module */
